* Route structure
the app/server/routes directory contains directories that have names that
are the subdomain we are routing over. The exception is the `_` folder
which is for the empty subdomain.
** Inside a subdomain
In a subdomain at the very least there should be a file called get.js
this corresponds like so

| basename             | filename | subdomain | route      | method | url                    |
|----------------------+----------+-----------+------------+--------+------------------------|
| routes/_             | get.js   | ''        | /          | GET    | miranda.com/           |
| routes/_/dashboard   | post.js  | ''        | /dashboard | POST   | miranda.com/dashboard  |
| routes/_/_p_username | get.js   | ''        | /:username | GET    | miranda.com/<username> |
| routes/api           | get.js   | api       | /          | GET    | api.miranda.com/       |

These will support arbitrary nesting so you can have many params and many nested routes.

Note that you can only have one `_p_foo` directory in a routes subdir because there is
no way to distinguish from the url which route you mean.

Getting the route string should be able to be done exclusively from the path of the file.

NOTE: if you have a multi word url route, make the words separated by - characters

| path                                          | route                                                |
|-----------------------------------------------+------------------------------------------------------|
| subdomain/then/pieces/of/_p_routes/will/equal | subdomain.host.tld/then/pieces/of/:routes/will/equal |

** contents of a file
Each file in a subdomain defines the following

| property   | purpose                                                                  | optional |
|------------+--------------------------------------------------------------------------+----------|
| handler    | the async handler for the route                                          | no       |
| route name | a short name alias for the route                                         | yes      |
| roles      | an array of roles that you want to access this route                     | yes      |
| ext        | an extension to add to the route name when you are trying to load a file | yes      |

** Permissions
now that the old generator is deprecated, the `constants/routes.json` is now
generated by talking to the allRoutes module and asking for a serialization of all
the routes that are defined
* Reasons for refactor
There are a few things that I want to accomplish with this refactor.
** Old system was ugly
As time went on it became apparent that nesting was going to be a nightmare
of random complexity. The mental model wasnt obvious and anything would have
sucked.
** Subdomains
Once I tried to add subdomains, routes were treated differently. In an ideal
world, subdomains would be different containers but for now, this allows
me to grow in a way that treats subdomains the same
** The future
Ideally, I will be building this application as a framework for myself in the
future. Before with the bad database this seemed far off but since the database
refactor, everything is more generic. 

The eventual goal is to have the ability to deploy a new application by simply
dropping in the following:

- subdomain/route directories
- views
- workflows
- sql files
* Views later
Later on views should mirror this structure as much as possible probably

